"""
Instagram scraper implementation using instaloader
More reliable than web scraping for individual posts
"""

import re
import time
import logging
from typing import Optional, List
from datetime import datetime
import instaloader
from pathlib import Path

from core.base_scraper import BaseScraper
from core.data_models import (
    Platform, SocialMediaPost, UserContext, AuthorInfo, 
    PostMetrics, MediaItem, MediaType
)
from core.exceptions import ScrapingError

logger = logging.getLogger(__name__)

class InstagramScraper(BaseScraper):
    """Instagram platform scraper using instaloader"""
    
    def __init__(self):
        super().__init__(Platform.INSTAGRAM)
        
        # Initialize instaloader with rate limiting friendly settings
        self.loader = instaloader.Instaloader(
            sleep=True,  # Enable built-in rate limiting
            quiet=True,  # Reduce logging noise
            download_videos=False,
            download_video_thumbnails=False,
            download_geotags=False,
            download_comments=False,
            save_metadata=False,
            compress_json=False,
            max_connection_attempts=3,  # Retry failed requests
            request_timeout=30.0,  # Shorter timeout
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        )
        
        # Track request timing for additional rate limiting
        self.last_request_time = 0
        self.min_request_interval = 2.0  # Minimum seconds between requests
        
    @property
    def url_patterns(self) -> List[str]:
        """Instagram URL patterns"""
        return [
            r'https?://(?:www\.)?instagram\.com/p/([A-Za-z0-9_-]+)/?',
            r'https?://(?:www\.)?instagram\.com/reel/([A-Za-z0-9_-]+)/?',
            r'https?://(?:www\.)?instagram\.com/tv/([A-Za-z0-9_-]+)/?',
            r'https?://instagram\.com/p/([A-Za-z0-9_-]+)/?',
            r'https?://instagram\.com/reel/([A-Za-z0-9_-]+)/?'
        ]
    
    def extract_post_id(self, url: str) -> str:
        """Extract post shortcode from Instagram URL"""
        for pattern in self.url_patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        
        raise ValueError(f"Could not extract Instagram post ID from URL: {url}")
    
    def _rate_limit_delay(self):
        """Implement additional rate limiting beyond instaloader's built-in limits"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < self.min_request_interval:
            sleep_time = self.min_request_interval - time_since_last
            logger.debug(f"Rate limiting: sleeping for {sleep_time:.2f} seconds")
            time.sleep(sleep_time)
        
        self.last_request_time = time.time()
    
    async def scrape_post(self, url: str, user_context: Optional[UserContext] = None) -> Optional[SocialMediaPost]:
        """Scrape an Instagram post using instaloader with enhanced error handling"""
        try:
            # Extract post shortcode
            shortcode = self.extract_post_id(url)
            
            logger.debug(f"Scraping Instagram post shortcode: {shortcode}")
            
            # Apply rate limiting
            self._rate_limit_delay()
            
            # Get post using instaloader with detailed error handling
            post = None
            try:
                post = instaloader.Post.from_shortcode(self.loader.context, shortcode)
                
            except instaloader.exceptions.LoginRequiredException as e:
                logger.error(f"Instagram requires login for post {shortcode}")
                raise ScrapingError(
                    "Instagram requires login to access this content. This is a common restriction for private or age-restricted posts.",
                    self.platform_name, url
                )
                
            except instaloader.exceptions.PrivateProfileNotFollowedException as e:
                logger.error(f"Instagram post {shortcode} is from private profile")
                raise ScrapingError(
                    "This Instagram post is from a private profile that requires following to access.",
                    self.platform_name, url
                )
                
            except instaloader.exceptions.PostUnavailableException as e:
                logger.error(f"Instagram post {shortcode} is unavailable")
                raise ScrapingError(
                    "This Instagram post is no longer available (may have been deleted or made private).",
                    self.platform_name, url
                )
                
            except instaloader.exceptions.ConnectionException as e:
                logger.error(f"Connection error for Instagram post {shortcode}: {e}")
                raise ScrapingError(
                    "Instagram is currently blocking requests. This is common due to rate limiting. Please try again later.",
                    self.platform_name, url
                )
                
            except instaloader.exceptions.BadResponseException as e:
                logger.error(f"Bad response from Instagram for post {shortcode}: {e}")
                if "429" in str(e) or "rate limit" in str(e).lower():
                    raise ScrapingError(
                        "Instagram rate limit exceeded. Please wait a few minutes before trying again.",
                        self.platform_name, url
                    )
                else:
                    raise ScrapingError(
                        f"Instagram returned an error response: {str(e)}",
                        self.platform_name, url
                    )
                    
            except Exception as e:
                logger.error(f"Unexpected error loading Instagram post {shortcode}: {e}")
                # Check if it's a rate limiting related error
                error_str = str(e).lower()
                if any(keyword in error_str for keyword in ['rate limit', '429', 'too many requests', 'blocked']):
                    raise ScrapingError(
                        "Instagram is rate limiting requests. Please try again in a few minutes.",
                        self.platform_name, url
                    )
                else:
                    raise ScrapingError(f"Failed to load Instagram post: {str(e)}", self.platform_name, url)
            
            if not post:
                logger.warning(f"No Instagram post data returned for shortcode: {shortcode}")
                raise ScrapingError("No data returned from Instagram for this post.", self.platform_name, url)
            
            # Create base post object
            social_post = self.create_post_base(shortcode, url, user_context)
            
            # Fill in Instagram-specific data
            social_post.text = post.caption or ''
            social_post.created_at = post.date_utc
            
            # Author information (safely handle missing profile data)
            try:
                owner_profile = post.owner_profile
                social_post.author = AuthorInfo(
                    username=post.owner_username,
                    display_name=owner_profile.full_name if owner_profile else post.owner_username,
                    followers_count=owner_profile.followers if owner_profile else 0,
                    verified=owner_profile.is_verified if owner_profile else False,
                    profile_url=f"https://instagram.com/{post.owner_username}",
                    avatar_url=owner_profile.profile_pic_url if owner_profile else None
                )
            except Exception as e:
                logger.debug(f"Could not load full profile data: {e}")
                # Fallback if profile data is unavailable
                social_post.author = AuthorInfo(
                    username=post.owner_username,
                    display_name=post.owner_username,
                    followers_count=0,
                    verified=False,
                    profile_url=f"https://instagram.com/{post.owner_username}",
                    avatar_url=None
                )
            
            # Metrics
            social_post.metrics = PostMetrics(
                likes=post.likes,
                shares=0,  # Instagram doesn't provide share count
                comments=post.comments,
                views=post.video_view_count if post.is_video else None
            )
            
            # Extract hashtags from caption
            social_post.scraped_hashtags = self._extract_hashtags_from_text(social_post.text)
            
            # Extract media
            social_post.media = self._extract_media(post)
            
            # Store raw Instagram data (safely handle all fields)
            tagged_users = []
            try:
                if hasattr(post, 'tagged_users'):
                    for user in post.tagged_users:
                        if hasattr(user, 'username'):
                            tagged_users.append(user.username)
                        elif isinstance(user, str):
                            tagged_users.append(user)
            except Exception as e:
                logger.debug(f"Could not extract tagged users: {e}")
            
            location_data = {'name': None, 'id': None}
            try:
                if post.location:
                    location_data = {
                        'name': post.location.name,
                        'id': post.location.id
                    }
            except Exception as e:
                logger.debug(f"Could not extract location: {e}")
            
            social_post.raw_data = {
                'shortcode': shortcode,
                'post_id': str(post.mediaid),
                'typename': post.typename,
                'is_video': post.is_video,
                'owner_id': post.owner_id,
                'accessibility_caption': getattr(post, 'accessibility_caption', ''),
                'location': location_data,
                'tagged_users': tagged_users,
                'scraped_at': datetime.now().isoformat(),
                'scraped_by_user': user_context.telegram_username if user_context else None,
                'scraped_by_user_id': user_context.telegram_user_id if user_context else None
            }
            
            logger.info(f"Successfully scraped Instagram post {shortcode} with {len(social_post.media)} media items")
            return social_post
            
        except ScrapingError:
            # Re-raise our custom errors with context
            raise
        except Exception as e:
            logger.error(f"Unexpected error scraping Instagram post from {url}: {e}")
            raise ScrapingError(f"Instagram scraping failed: {str(e)}", self.platform_name, url)
    
    def _extract_hashtags_from_text(self, text: str) -> List[str]:
        """Extract hashtags from Instagram caption"""
        hashtag_pattern = r'#(\w+)'
        hashtags = re.findall(hashtag_pattern, text, re.IGNORECASE)
        return [f"#{tag}" for tag in hashtags]
    
    def _extract_media(self, post) -> List[MediaItem]:
        """Extract media items from Instagram post"""
        media_items = []
        
        try:
            if post.typename == 'GraphSidecar':
                # Multiple media items (carousel)
                try:
                    for node in post.get_sidecar_nodes():
                        if node.is_video:
                            media_items.append(MediaItem(
                                url=node.video_url,
                                media_type=MediaType.VIDEO,
                                width=getattr(node, 'width', None),
                                height=getattr(node, 'height', None),
                                mime_type='video/mp4'
                            ))
                        else:
                            media_items.append(MediaItem(
                                url=node.display_url,
                                media_type=MediaType.PHOTO,
                                width=getattr(node, 'width', None),
                                height=getattr(node, 'height', None),
                                mime_type='image/jpeg'
                            ))
                except Exception as e:
                    logger.warning(f"Error extracting sidecar media: {e}")
            else:
                # Single media item
                if post.is_video:
                    media_items.append(MediaItem(
                        url=post.video_url,
                        media_type=MediaType.VIDEO,
                        width=getattr(post, 'width', None),
                        height=getattr(post, 'height', None),
                        mime_type='video/mp4'
                    ))
                else:
                    media_items.append(MediaItem(
                        url=post.url,
                        media_type=MediaType.PHOTO,
                        width=getattr(post, 'width', None),
                        height=getattr(post, 'height', None),
                        mime_type='image/jpeg'
                    ))
        
        except Exception as e:
            logger.warning(f"Error extracting media from Instagram post: {e}")
        
        return media_items
